version: 2.1
executors:
  node8:
    docker:
    - image: circleci/node:8
    environment:
      NPM_CONFIG_PREFIX: ~/.npm-global

commands:
  setup:
    steps:
    - checkout
    - restore_cache:
        keys:
        - v3-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}
    - run:
        name: install npm 6.4.1
        command: sudo npm -g install npm@6.4.1
    - run:
        name: Installing Dependencies
        command: npm install
    - save_cache:
        paths:
        - node_modules
        key: v3-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}
    - run:
        name: prepare test git user
        command: git config --global user.email "circleci@project-helix.io" && git config --global user.name "CircleCi Build"

jobs:
  build:
    executor: node8
    working_directory: ~/repo

    steps:
    - setup

    # run tests!
    - run: mkdir junit
    - run:
        name: prepare test git user
        command: git config --global user.email "you@example.com" && git config --global user.name "Your Name"
    - run:
        name: Lint
        command: npm run lint

    # test & get code coverage
    - run:
        name: Getting Code Coverage
        command: circleci tests glob test/test*.js | circleci tests split --split-by=timings | xargs ./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha -- -R mocha-junit-reporter --exit && npx codecov
        environment:
          MOCHA_FILE: junit/test-results.xml

    - store_test_results:
        path: junit

    - store_artifacts:
        path: junit

  publish-pre-release:
    executor: node8
    working_directory: ~/repo

    steps:
    - setup
    - run:
        name: revert changes to package-lock.json
        command: git checkout -- package-lock.json

    - run:
        name: configure npm registry
        command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc

    - run:
        name: version pre-release
        command: npm version prerelease --preid=pre -m "Release %s [ci skip]"
        environment:
          MOCHA_FILE: junit/test-results.xml

    - store_test_results:
        path: junit

    # unfortunately we cannot create a release commit with no tag with `npm version`, so we need to delete it here again
    - run:
        name: delete pre-release tag
        command: npm run delete-git-tag

    - run:
        name: publish pre-release
        command: npm publish --tag next --access public

  publish-examples:
    executor: node8
    working_directory: ~/repo

    steps:
    - setup
    - run:
        name: Install Globally
        command: mkdir -p ~/.npm-global && npm link

    - run:
        name: Deploy Snapshot to Adobe I/O Runtime
        command: ~/.npm-global/bin/hlx build && ~/.npm-global/bin/hlx deploy --dirty --no-auto --wsk-namespace trieloff --wsk-auth $WSK_AUTH --loggly-host trieloff --loggly-auth $LOGGLY_AUTH
        working_directory: test/integration

  installer:
    macos:
      xcode: "9.0"
    steps:
    - checkout
    - run: xcodebuild -version
    - run:
        name: Build Installer
        command: ./build.sh
        working_directory: build
    - run:
        name: Verify Installer
        command: sh hlx_install.sh -- --overwrite && hlx --version
        working_directory: build
    - store_artifacts:
        path: build/hlx_install.sh
    - persist_to_workspace:
        # save to workspace for downstream jobs
        root: ./build
        paths:
          - hlx_install.sh

  github-release:
    # https://circleci.com/blog/publishing-to-github-releases-via-circleci/
    docker:
      - image: cibuilds/github:0.12
    steps:
      - attach_workspace:
          at: ./installer_build
      - run:
          name: "Publish Release on GitHub"
          command: |
            CHANGELOG="**Changes:**<p><p>[**TODO** list of resolved issues]"
            ghr -t ${GITHUB_API_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -b "${CHANGELOG}" -recreate ${CIRCLE_TAG} ./installer_build/      

workflows:
  version: 2
  build:
    jobs:
    # publish pre-releases on master
    - publish-pre-release:
        requires:
        - build
        filters:
          branches:
            only: master
    - build
    - installer:
        filters:
          branches:
            only: master

  build-and-release:
    jobs:
      - build:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
      - installer:
          requires:
            - build
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
      - github-release:
          requires:
            - installer
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
