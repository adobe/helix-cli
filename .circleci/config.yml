version: 2
jobs:
  build:
    # Currently this doesn't help much since most of the time is spent in npm install,
    # which is slow for all parallel processes
    # parallelism: 10
    docker:
    # specify the version you desire here
    - image: circleci/node:8-stretch
    working_directory: ~/repo
    environment:
      NPM_CONFIG_PREFIX: ~/.npm-global

    steps:
    - checkout

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v3-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}

    - run:
        name: install npm 6.4.0
        command: sudo npm -g install npm@6.4.0

    - run:
        name: Installing Dependencies
        command: npm install

    - save_cache:
        paths:
        - node_modules
        key: v3-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}

        # run tests!
    - run: mkdir junit
    - run:
        name: prepare test git user
        command: git config --global user.email "you@example.com" && git config --global user.name "Your Name"
    - run:
        name: Lint
        command: npm run lint

    # test & get code coverage
    - run:
        name: Getting Code Coverage
        command: circleci tests glob test/test*.js | circleci tests split --split-by=timings | xargs ./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha -- -R mocha-junit-reporter --exit && npx codecov
        environment:
          MOCHA_FILE: junit/test-results.xml

    - store_test_results:
        path: junit

    - store_artifacts:
        path: junit

  publish-pre-release:
    docker:
    # specify the version you desire here
    - image: circleci/node:8-stretch

    working_directory: ~/repo

    steps:
    - checkout

    - restore_cache:
        keys:
        - v3-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}

    - run:
        name: prepare test git user
        command: git config --global user.email "circleci@example.com" && git config --global user.name "CircleCi Build"

    - run:
        name: install npm 6.4.0
        command: sudo npm -g install npm@6.4.0

    - run:
        name: install
        command: npm install

    - run:
        name: revert changes to package-lock.json
        command: git checkout -- package-lock.json

    - run:
        name: configure npm registry
        command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc

    - run:
        name: version pre-release
        command: npm version prerelease --preid=pre -m "Release %s [ci skip]"

    # unfortunately we cannot create a release commit with no tag with `npm version`, so we need to delete it here again
    - run:
        name: delete pre-release tag
        command: npm run delete-git-tag

    - run:
        name: publish pre-release
        command: npm publish --tag next --access public

  publish-examples:
    docker:
    # specify the version you desire here
    - image: circleci/node:8-stretch
    environment:
      NPM_CONFIG_PREFIX: ~/.npm-global

    working_directory: ~/repo

    steps:
    - checkout

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v3-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}

    - run:
        name: install npm 6.4.0
        command: sudo npm -g install npm@6.4.0

    - run:
        name: Install Dependencies
        command: npm install

    - save_cache:
        paths:
        - node_modules
        key: v3-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}

    - run:
        name: Install Globally
        command: mkdir -p ~/.npm-global && npm link

    - run:
        name: Deploy Snapshot to Adobe I/O Runtime
        command: ~/.npm-global/bin/hlx build && ~/.npm-global/bin/hlx deploy --dirty --no-auto --wsk-namespace trieloff --wsk-auth $WSK_AUTH --loggly-host trieloff --loggly-auth $LOGGLY_AUTH
        working_directory: test/integration

workflows:
  version: 2
  build:
    jobs:
    - publish-examples:
        requires:
        - build
        filters:
          branches:
            only:
            - master
    # publish pre-releases on master
    - publish-pre-release:
        requires:
        - build
        filters:
          branches:
            only: master
    - build
